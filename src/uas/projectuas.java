/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package uas;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author itzkazuri
 */
// Kelas utama untuk frame aplikasi, mewarisi dari javax.swing.JFrame
public class projectuas extends javax.swing.JFrame {

    /**
     * Konstruktor: method yang pertama kali dijalankan saat objek projectuas dibuat.
     */
    public projectuas() {
        initComponents(); // Method ini untuk inisialisasi semua komponen GUI (dibuat otomatis oleh NetBeans)
        loadData();       // Memanggil method loadData() untuk menampilkan data dari database saat aplikasi pertama kali dibuka
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbdatabase = new javax.swing.JTable();
        lblnama = new javax.swing.JTextField();
        lblnim = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btntambah = new javax.swing.JButton();
        btnedit = new javax.swing.JButton();
        btnhapus = new javax.swing.JButton();
        btnclear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Aplikasi Manajemen Mahasiswa");

        jLabel2.setText("Nim:");

        jLabel3.setText("Nama:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IF-MDI", "IF-PAR", "RSK", "DKV", "SK" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Jurusan:");

        tbdatabase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbdatabase);
        tbdatabase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbdatabaseMouseClicked(evt);
            }
        });

        lblnama.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblnamaActionPerformed(evt);
            }
        });

        lblnim.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lblnimKeyTyped(evt);
            }
        });

        jLabel5.setText("Aksi:");

        btntambah.setText("Tambah");
        btntambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btntambahActionPerformed(evt);
            }
        });

        btnedit.setText("Edit");
        btnedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btneditActionPerformed(evt);
            }
        });

        btnhapus.setText("Hapus");
        btnhapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhapusActionPerformed(evt);
            }
        });

        btnclear.setText("Clear form");
        btnclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnclearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btntambah)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnedit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnhapus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnclear)
                        .addContainerGap())
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(283, 283, 283))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblnama, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblnim, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(395, 395, 395))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap()))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblnim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblnama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btntambah)
                            .addComponent(btnedit, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(btnhapus)
                            .addComponent(btnclear))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblnimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblnimActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblnimActionPerformed

    /**
     * Method ini dipanggil setiap kali ada tombol keyboard yang ditekan di field NIM.
     * Fungsinya untuk validasi input, hanya memperbolehkan angka yang diketik.
     */
    private void lblnimKeyTyped(java.awt.event.KeyEvent evt) {
        char c = evt.getKeyChar(); // Mendapatkan karakter yang diketik
        // Mengecek apakah karakter yang diketik bukan digit (angka)
        if (!Character.isDigit(c)) {
            evt.consume(); // Jika bukan angka, event (pengetikan) akan diabaikan
        }
    }

    /**
     * Method ini dijalankan ketika tombol "Clear form" diklik.
     * Fungsinya untuk membersihkan semua input field dan pilihan di form.
     */
    private void btnclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnclearActionPerformed
        lblnim.setText(""); // Mengosongkan field NIM
        lblnama.setText(""); // Mengosongkan field Nama
        jComboBox1.setSelectedIndex(0); // Mengatur pilihan Jurusan kembali ke item pertama
        tbdatabase.clearSelection(); // Menghapus seleksi pada tabel
    }//GEN-LAST:event_btnclearActionPerformed

    private void lblnamaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblnamaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblnamaActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * Method ini dijalankan ketika tombol "Tambah" diklik.
     * Fungsinya untuk menambahkan data mahasiswa baru ke dalam database.
     */
    private void btntambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btntambahActionPerformed
        // Mengambil data dari input fields
        String nim = lblnim.getText();
        String nama = lblnama.getText();
        String jurusan = (String) jComboBox1.getSelectedItem();

        // Validasi sederhana: memastikan NIM dan Nama tidak kosong
        if (nim.isEmpty() || nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, "NIM dan Nama wajib diisi!");
            return; // Menghentikan eksekusi jika validasi gagal
        }

        try {
            // Menyiapkan query SQL untuk memasukkan data baru
            Connection conn = Koneksi.getConnection();
            String query = "INSERT INTO mahasiswa (nim, nama, jurusan) VALUES (?, ?, ?)";
            // Menggunakan PreparedStatement untuk keamanan (menghindari SQL Injection)
            java.sql.PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, nim);
            ps.setString(2, nama);
            ps.setString(3, jurusan);
            ps.executeUpdate(); // Menjalankan query

            JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");
            loadData(); // Memuat ulang data di tabel untuk menampilkan data baru
            btnclearActionPerformed(evt); // Membersihkan form setelah data ditambahkan

        } catch (Exception e) {
            // Menampilkan pesan error jika terjadi kegagalan
            JOptionPane.showMessageDialog(this, "Gagal menambahkan data: " + e.getMessage());
        }
    }//GEN-LAST:event_btntambahActionPerformed

    /**
     * Method ini dijalankan ketika tombol "Edit" diklik.
     * Fungsinya untuk memperbarui data mahasiswa yang ada di database.
     */
    private void btneditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btneditActionPerformed
        // Mengecek apakah ada baris yang dipilih di tabel
        int row = tbdatabase.getSelectedRow();
        if (row == -1) { // Jika tidak ada baris yang dipilih
            JOptionPane.showMessageDialog(this, "Pilih data yang mau diedit dulu di tabel!");
            return;
        }

        // Mengambil data dari baris yang dipilih dan dari input fields
        String id = tbdatabase.getValueAt(row, 0).toString(); // Mengambil ID dari kolom pertama
        String nim = lblnim.getText();
        String nama = lblnama.getText();
        String jurusan = (String) jComboBox1.getSelectedItem();

        try {
            // Menyiapkan query SQL untuk update data berdasarkan ID
            Connection conn = Koneksi.getConnection();
            String query = "UPDATE mahasiswa SET nim=?, nama=?, jurusan=? WHERE id=?";
            java.sql.PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, nim);
            ps.setString(2, nama);
            ps.setString(3, jurusan);
            ps.setString(4, id);
            ps.executeUpdate(); // Menjalankan query update

            JOptionPane.showMessageDialog(this, "Data berhasil diupdate!");
            loadData(); // Memuat ulang data di tabel
            btnclearActionPerformed(evt); // Membersihkan form

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Gagal mengedit data: " + e.getMessage());
        }
    }//GEN-LAST:event_btneditActionPerformed

    /**
     * Method ini dijalankan ketika tombol "Hapus" diklik.
     * Fungsinya untuk menghapus data mahasiswa dari database.
     */
    private void btnhapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhapusActionPerformed
        // Mengecek apakah ada baris yang dipilih di tabel
        int row = tbdatabase.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Pilih data yang mau dihapus!");
            return;
        }

        // Meminta konfirmasi dari pengguna sebelum menghapus
        int konfirmasi = JOptionPane.showConfirmDialog(this, "Yakin mau hapus data ini?", "Konfirmasi", JOptionPane.YES_NO_OPTION);
        if (konfirmasi == JOptionPane.YES_OPTION) {
            String id = tbdatabase.getValueAt(row, 0).toString(); // Mengambil ID dari baris yang dipilih

            try {
                // Menyiapkan query SQL untuk menghapus data berdasarkan ID
                Connection conn = Koneksi.getConnection();
                String query = "DELETE FROM mahasiswa WHERE id=?";
                java.sql.PreparedStatement ps = conn.prepareStatement(query);
                ps.setString(1, id);
                ps.executeUpdate(); // Menjalankan query hapus

                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                loadData(); // Memuat ulang data di tabel
                btnclearActionPerformed(evt); // Membersihkan form

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Gagal menghapus data: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnhapusActionPerformed

    /**
     * Method ini dijalankan ketika salah satu baris di tabel diklik.
     * Fungsinya untuk menampilkan data dari baris yang dipilih ke dalam form input.
     */
    private void tbdatabaseMouseClicked(java.awt.event.MouseEvent evt) {
        int row = tbdatabase.getSelectedRow(); // Mendapatkan indeks baris yang diklik
        if (row != -1) { // Memastikan ada baris yang dipilih
            // Mengambil data dari setiap kolom di baris yang dipilih
            String nim = tbdatabase.getValueAt(row, 1).toString();
            String nama = tbdatabase.getValueAt(row, 2).toString();
            String jurusan = tbdatabase.getValueAt(row, 3).toString();

            // Menampilkan data tersebut ke komponen form
            lblnim.setText(nim);
            lblnama.setText(nama);
            jComboBox1.setSelectedItem(jurusan);
        }
    }
    
    /**
     * Method ini berfungsi untuk memuat (load) semua data dari tabel 'mahasiswa' di database
     * dan menampilkannya ke dalam komponen JTable (tbdatabase).
     */
    private void loadData() {
        try {
            // 1. Membuat koneksi ke database
            Connection conn = Koneksi.getConnection();
            // 2. Membuat statement untuk menjalankan query
            Statement stmt = conn.createStatement();
            // 3. Menjalankan query SELECT untuk mengambil semua data dari tabel mahasiswa
            ResultSet rs = stmt.executeQuery("SELECT * FROM mahasiswa");

            // 4. Membuat model tabel default untuk JTable
            DefaultTableModel model = new DefaultTableModel();
            // 5. Menambahkan kolom-kolom ke model tabel
            model.addColumn("ID");
            model.addColumn("NIM");
            model.addColumn("Nama");
            model.addColumn("Jurusan");

            // 6. Looping untuk membaca setiap baris hasil query
            while (rs.next()) {
                // 7. Menambahkan baris baru ke model tabel dengan data dari database
                model.addRow(new Object[]{
                    rs.getInt("id"),
                    rs.getString("nim"),
                    rs.getString("nama"),
                    rs.getString("jurusan")
                });
            }
            // 8. Mengatur model tabel (yang sudah berisi data) ke komponen JTable
            tbdatabase.setModel(model);
        } catch (Exception e) {
            // Menampilkan pesan error jika gagal memuat data
            JOptionPane.showMessageDialog(this, "Gagal memuat data: " + e.getMessage());
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(projectuas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(projectuas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(projectuas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(projectuas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        // Menjalankan pembuatan GUI di Event Dispatch Thread (EDT) untuk keamanan thread
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Membuat instance dari form projectuas dan menampilkannya
                new projectuas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnclear;
    private javax.swing.JButton btnedit;
    private javax.swing.JButton btnhapus;
    private javax.swing.JButton btntambah;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lblnama;
    private javax.swing.JTextField lblnim;
    private javax.swing.JTable tbdatabase;
    // End of variables declaration//GEN-END:variables
}
